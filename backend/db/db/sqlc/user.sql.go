// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createClassification = `-- name: CreateClassification :exec
INSERT INTO classifications (id, user_id,retinography,performed_date,prediction)
VALUES ($1, $2, $3, $4,$5)
`

type CreateClassificationParams struct {
	ID            string
	UserID        string
	Retinography  []byte
	PerformedDate time.Time
	Prediction    int32
}

func (q *Queries) CreateClassification(ctx context.Context, arg CreateClassificationParams) error {
	_, err := q.db.ExecContext(ctx, createClassification,
		arg.ID,
		arg.UserID,
		arg.Retinography,
		arg.PerformedDate,
		arg.Prediction,
	)
	return err
}

const createDoctor = `-- name: CreateDoctor :exec
INSERT INTO doctors (id, name,crm ,birthday, user_id)
VALUES ($1, $2, $3, $4,$5)
`

type CreateDoctorParams struct {
	ID       string
	Name     string
	Crm      string
	Birthday time.Time
	UserID   string
}

func (q *Queries) CreateDoctor(ctx context.Context, arg CreateDoctorParams) error {
	_, err := q.db.ExecContext(ctx, createDoctor,
		arg.ID,
		arg.Name,
		arg.Crm,
		arg.Birthday,
		arg.UserID,
	)
	return err
}

const createPatient = `-- name: CreatePatient :exec
INSERT INTO patients (id, name, birthday, user_id)
VALUES ($1, $2, $3, $4)
`

type CreatePatientParams struct {
	ID       string
	Name     string
	Birthday time.Time
	UserID   string
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) error {
	_, err := q.db.ExecContext(ctx, createPatient,
		arg.ID,
		arg.Name,
		arg.Birthday,
		arg.UserID,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id,email, password)
VALUES ($1, $2, $3)
`

type CreateUserParams struct {
	ID       string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.ID, arg.Email, arg.Password)
	return err
}

const getClassificationsByPatientId = `-- name: GetClassificationsByPatientId :many
SELECT retinography, performed_date, prediction, user_id  
FROM classifications  
WHERE user_id = $1
`

type GetClassificationsByPatientIdRow struct {
	Retinography  []byte
	PerformedDate time.Time
	Prediction    int32
	UserID        string
}

func (q *Queries) GetClassificationsByPatientId(ctx context.Context, userID string) ([]GetClassificationsByPatientIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getClassificationsByPatientId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClassificationsByPatientIdRow
	for rows.Next() {
		var i GetClassificationsByPatientIdRow
		if err := rows.Scan(
			&i.Retinography,
			&i.PerformedDate,
			&i.Prediction,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password 
FROM users 
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID       string
	Email    string
	Password string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.Password)
	return i, err
}
